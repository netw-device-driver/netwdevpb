// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package netwdevpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheStatusClient is the client API for CacheStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheStatusClient interface {
	Request(ctx context.Context, in *CacheStatusRequest, opts ...grpc.CallOption) (*CacheStatusReply, error)
}

type cacheStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheStatusClient(cc grpc.ClientConnInterface) CacheStatusClient {
	return &cacheStatusClient{cc}
}

func (c *cacheStatusClient) Request(ctx context.Context, in *CacheStatusRequest, opts ...grpc.CallOption) (*CacheStatusReply, error) {
	out := new(CacheStatusReply)
	err := c.cc.Invoke(ctx, "/netwdevpb.CacheStatus/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheStatusServer is the server API for CacheStatus service.
// All implementations must embed UnimplementedCacheStatusServer
// for forward compatibility
type CacheStatusServer interface {
	Request(context.Context, *CacheStatusRequest) (*CacheStatusReply, error)
	mustEmbedUnimplementedCacheStatusServer()
}

// UnimplementedCacheStatusServer must be embedded to have forward compatible implementations.
type UnimplementedCacheStatusServer struct {
}

func (UnimplementedCacheStatusServer) Request(context.Context, *CacheStatusRequest) (*CacheStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedCacheStatusServer) mustEmbedUnimplementedCacheStatusServer() {}

// UnsafeCacheStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheStatusServer will
// result in compilation errors.
type UnsafeCacheStatusServer interface {
	mustEmbedUnimplementedCacheStatusServer()
}

func RegisterCacheStatusServer(s grpc.ServiceRegistrar, srv CacheStatusServer) {
	s.RegisterService(&CacheStatus_ServiceDesc, srv)
}

func _CacheStatus_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheStatusServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netwdevpb.CacheStatus/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheStatusServer).Request(ctx, req.(*CacheStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheStatus_ServiceDesc is the grpc.ServiceDesc for CacheStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netwdevpb.CacheStatus",
	HandlerType: (*CacheStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _CacheStatus_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configMessage.proto",
}
